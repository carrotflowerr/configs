;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Initialize package.el and add MELPA repo
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Ensure use-package is installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

;; Automatically save buffers when they lose focus
(defun save-buffer-if-visiting-file ()
  (when (and (buffer-file-name) (buffer-modified-p))
    (save-buffer)))
(add-hook 'focus-out-hook 'save-buffer-if-visiting-file)
(add-hook 'kill-buffer-hook 'save-buffer-if-visiting-file)

;; Disable save prompts when killing a buffer
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function kill-buffer-query-functions))
;; Disable auto-save files
(setq auto-save-default nil)

;; Buffer Terminator (from MELPA)
(use-package buffer-terminator
  :custom
  (buffer-terminator-verbose nil)
  :config
  (buffer-terminator-mode 1))
(setq buffer-terminator-verbose t)
(setq buffer-terminator-inactivity-timeout (* 30 60)) ; 30 minutes
(customize-set-variable 'buffer-terminator-interval (* 10 60)) ; 10 minutes

;; Line wrap
(global-visual-line-mode t)
(add-hook 'prog-mode-hook 'visual-line-mode)

;; Dashboard (MELPA)
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice
        (lambda () (get-buffer-create dashboard-buffer-name))))

;; Do not prompt to save when exiting Emacs
(setq confirm-kill-emacs nil)

;; Spell check for text files using flyspell (built-in)
(add-hook 'text-mode-hook 'flyspell-mode)
(eval-after-load 'flyspell
  '(progn
     (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-word)
     (define-key flyspell-mouse-map (kbd "<mouse-2>") nil)))

;; Terminal keybinding for eshell
(global-set-key (kbd "C-`") 'eshell)

;; Smartparens (MELPA)
(use-package smartparens
  :config
  (smartparens-global-mode 1)
  (smartparens-strict-mode 1))
(global-set-key (kbd "C-x a") 'mark-whole-buffer)

;; Ready Player (MELPA)
(use-package ready-player
  :config
  (ready-player-mode +1))

;; Spacious Padding (MELPA)
(use-package spacious-padding
  :config
  (spacious-padding-mode 1))

;; Vertico for Completion (MELPA)
(use-package vertico
  :config
  (vertico-mode 1))

;; Set eww as default browser
(setq browse-url-browser-function 'eww-browse-url)

;; Save place in file
(save-place-mode 1)
(setq save-place-file (expand-file-name "places" user-emacs-directory))

;; Custom-set variables and faces (managed by Emacs Custom)
(custom-set-variables
 '(blink-cursor-mode nil)
 '(cua-mode t)
 '(custom-enabled-themes '(nano-light))
 '(custom-safe-themes
   '("e7820b899036ae7e966dcaaec29fd6b87aef253748b7de09e74fdc54407a7a02" default))
 '(desktop-save-mode t)
 '(display-time-mode t)
 '(global-display-line-numbers-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 '(default ((t (:family "Fixedsys Excelsior" :foundry "POOP" :slant normal
                        :weight regular :height 203 :width normal)))))
